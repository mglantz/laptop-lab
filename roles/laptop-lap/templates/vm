#!/bin/bash
# Provision VM

RED="\e[31m"
GREEN="\e[32m"
ENDCOLOR="\e[0m"
dc_home="/home/{{ ansible_user_id }}/ansible/localdc"

DEFAULT_NET_STATUS=$(virsh net-info default |grep Active | cut -f2 -d: |tr -d ' ')

if [[ "$DEFAULT_NET_STATUS" == "no" ]]; then
	virsh net-start default
fi

for DIST in `ls $dc_home/distributions/*.dist`; do
	DISTS="$DISTS`echo ${DIST::len-5} |xargs basename`|"
done > /dev/null 2>&1

if [[ "$DISTS" = "" ]]; then
	echo "No distributions defined, please create distributions based on $dc_home/distributions/distro.dist.template"
	exit 0
fi

DISTS=${DISTS::len-1}

helpme(){
    echo "Create VM Usage: $0 [hostname.{{ labdomain }}|hostname] [number-of-cpus] [mb-of-memory] [Optional: $DISTS]"
	echo
	echo "Run playbook on existing VM: $0 [hostname.{{ labdomain }}|hostname] [playbook|pb] [playbook-name]"
	echo "List VMs: $0 [list|ls]"
	echo "Remove VM: $0 [hostname.{{ labdomain }}|hostname] [remove|rm]"
	exit 0
}

if [ "$#" -eq 0 ]
then
	helpme
fi

case $1 in
	*help)
		helpme
	;;
esac

if [[ "`echo $1 |grep {{ labdomain }} | wc -l`" == "0" ]];then
	vm_hostname=$1.{{ labdomain }}
else
	vm_hostname=$1
fi

vm_cpu=$2
vm_mem=$3
vm_ssh_key="/home/{{ ansible_user_id }}/.ssh/id_rsa.pub"
vm_image="$dc_home/vms/${vm_hostname}.qcow2"

case $1 in
	"list"|"ls")
	echo -e "${GREEN}Running VMs${ENDCOLOR}"
	virsh list --name
	echo -e "${RED}Stopped VMs${ENDCOLOR}"
	virsh list --state-shutoff --name --state-paused
	exit 0
	;;
esac

case $2 in
	"playbook"|"pb")

        if [[ "`virsh list --all --name | grep ^$vm_hostname |wc -l`" == "0" ]];then
                echo "VM: $vm_hostname doesn't exist... exiting"
                exit 0
        fi

		if [ ! -f $dc_home/inventories/inventory-$vm_hostname ];then

	        mkdir -p $dc_home/inventories
       		echo "$vm_hostname ansible_user=root ansible_ssh_common_args=\"-o StrictHostKeyChecking=no\"" > $dc_home/inventories/inventory-$vm_hostname
		fi

                if [[ "$3" == "" ]]; then
                    echo "Playbook not specified, please specify or select from:"
                    ls $dc_home/playbooks
                    exit 0

                elif [ -f $3 ]; then
			playbook=$3
		else
			if [ ! -f $dc_home/playbooks/$3 ];then
   		        echo "Playbook: $3 doesn't exist in $dc_home/playbooks/.. existing"
   	    	    exit 0
       		fi
			playbook=$dc_home/playbooks/$3
		fi
	
		echo "Executing playbook: $playbook on $vm_hostname"

		if [[ "`virsh list --state-running --name |grep ^$vm_hostname | wc -l`" == "0" ]]; then
			echo "VM is not running, starting"
			virsh start --domain $vm_hostname
			while true; do
					ssh -o StrictHostKeyChecking=no -q root@$vm_hostname exit
					if [ "$?" -eq 0 ]; then
							echo "$vm_hostname is up."
							break
					else
							echo "Waiting for $vm_hostname to come up."
							sleep 1
					fi
			done
		fi
			ansible-playbook -i $dc_home/inventories/inventory-$vm_hostname $playbook
		exit 0
		;;
	"remove"|"rm")

		if [[ "`virsh list --all --name | grep ^$vm_hostname |wc -l`" == "0" ]];then
					echo "VM: $vm_hostname doesn't exist... exiting"
					exit 0
		fi

		if [[ "`virsh list --state-running --name |grep ^$vm_hostname | wc -l`" != "0" ]]; then
			virsh destroy $vm_hostname
		fi
			echo "Removing VM: $vm_hostname"
			DISKS=$(virsh domblklist $vm_hostname --details | awk '{print $4}'|grep -v Source)
			virsh undefine $vm_hostname
			for DISK in $DISKS; do
				echo "Removing Disk: $DISK"
				rm -rf "$DISK"
			done

			exit 0
		;;

	"start")

		if [[ "`virsh list --all --name | grep ^$vm_hostname |wc -l`" == "0" ]];then
			echo "VM: $vm_hostname doesn't exist... exiting"
			exit 0
		fi

		if [[ "`virsh list --state-running --name |grep ^$vm_hostname | wc -l`" != "0" ]]; then
			echo "VM: $vm_hostname is already running"
			exit 0 
		fi

		virsh start $vm_hostname

		exit 0

		;;
	
	"stop")

		if [[ "`virsh list --all --name | grep ^$vm_hostname |wc -l`" == "0" ]];then
			echo "VM: $vm_hostname doesn't exist... exiting"
			exit 0
		fi

		if [[ "`virsh list --state-shutoff --name |grep ^$vm_hostname | wc -l`" != "0" ]]; then
			echo "VM: $vm_hostname is already stopped"
			exit 0 
		fi

		virsh destroy $vm_hostname

		exit 0

		;;

esac


if [[ "`virsh list --all --name | grep ^$vm_hostname |wc -l`" != "0" ]];then
        echo "VM: $vm_hostname already exist... Won't override"
        exit 0
fi

if [[ "$4" == "" ]]; then
	if [ ! -f $dc_home/distributions/default ]; then
		echo "No distribution has been selected and default distribution haven't been set."
		echo "Please create a symlink: $dc_home/distributions/default, that points to the default distribution"
		exit 0
	fi

	source $dc_home/distributions/default
else
	if [ ! -f $dc_home/distributions/$4.dist ]; then
		echo "Distribution $4 isn't defined."
		echo "Please choose one of: $DISTS" 
		exit 0
	fi

	source $dc_home/distributions/$4.dist

fi

echo "Deploying $DISTNAME"
vm_template=$DISTFILE
vm_playbooks=$DISTPLAYBOOKS

if [ ! -f $dc_home/distributions/$vm_template ]; then
	echo "$vm_template does not exists in the $dc_home/distributions/ folder"
	exit 0
fi

cp $dc_home/distributions/$vm_template $vm_image

# Prepare VM-image
virt-sysprep --hostname $vm_hostname --enable customize -a $vm_image --ssh-inject root:file:$vm_ssh_key

# Create and startup VM
cd $dc_home
sudo ansible-playbook  provision.yml -e vm_image_name=$(echo $vm_image|sed 's/.qcow2//g') -e vm_name=$vm_hostname -e vm_vcpus=$vm_cpu -e vm_ram_mb=$vm_mem -e vm_net=default

mkdir -p $dc_home/inventories
echo $vm_hostname ansible_user=root > $dc_home/inventories/inventory-$vm_hostname

# Wait for system to come up
while true
do
	ssh -o StrictHostKeyChecking=no -q root@$vm_hostname exit
	if [ "$?" -eq 0 ]
	then
		echo "$vm_hostname is up, initiating setup."
		break
	else
		echo "Waiting for $vm_hostname to come up."
		sleep 1
	fi
done

# Run playbooks
for playbook in $vm_playbooks; do 
	echo "Running playbook: $dc_home/playbooks/$playbook"
	ansible-playbook -e vm_name=$vm_hostname -i $dc_home/inventories/inventory-$vm_hostname $dc_home/playbooks/$playbook
done

